// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/notification/domain/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/juandr89/delivery-notifier-buyer/src/notification/domain"
)

type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
}

type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

func (m *MockNotificationRepository) GetNotificationCodes(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationCodes", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockNotificationRepositoryMockRecorder) GetNotificationCodes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationCodes", reflect.TypeOf((*MockNotificationRepository)(nil).GetNotificationCodes), ctx)
}

func (m *MockNotificationRepository) GetNotifications(ctx context.Context, email string) ([]domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifications", ctx, email)
	ret0, _ := ret[0].([]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockNotificationRepositoryMockRecorder) GetNotifications(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockNotificationRepository)(nil).GetNotifications), ctx, email)
}

func (m *MockNotificationRepository) SaveNotification(ctx context.Context, notification domain.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNotification", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockNotificationRepositoryMockRecorder) SaveNotification(ctx, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNotification", reflect.TypeOf((*MockNotificationRepository)(nil).SaveNotification), ctx, notification)
}
